// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // A instruction or C instruction?
    Mux16(a=instruction, b=alu-out, sel=instruction[15], out=areg-in);
    Mux16(a=false, b=instruction, sel=instruction[15],
          out[0]=jump-gt,
          out[1]=jump-eq,
          out[2]=jump-lt,
          out[3]=writeM,
          out[4]=writeD,
          out[5]=writeAb,
          out[6]=no,
          out[7]=f,
          out[8]=ny,
          out[9]=zy,
          out[10]=nx,
          out[11]=zx,
          out[12]=a);

    // A register
    Not(in=instruction[15], out=writeAa);
    Or(a=writeAa, b=writeAb, out=writeA);
    ARegister(in=areg-in, load=writeA, out=areg-out, out[0..14]=addressM);

    // D register
    DRegister(in=alu-out, load=writeD, out=alu-x);

    // Select A or M for ALU input y
    Mux16(a=areg-out, b=inM, sel=a, out=alu-y);

    // Program Counter
    PC(in=areg-out, load=jump, inc=true, reset=reset, out[0..14]=pc);

    // Jump logic
    Not(in=alu-zero, out=alu-nonzero);
    Not(in=alu-neg, out=alu-nonneg);
    And(a=alu-nonzero, b=alu-nonneg, out=alu-gt);
    And(a=alu-nonzero, b=alu-neg, out=alu-lt);

    And(a=jump-gt, b=alu-gt, out=jump0);
    And(a=jump-eq, b=alu-zero, out=jump1);
    And(a=jump-lt, b=alu-lt, out=jump2);

    Or(a=jump0, b=jump1, out=jump-t1);
    Or(a=jump-t1, b=jump2, out=jump);

    // ALU logic
    ALU(x=alu-x, y=alu-y, zx=zx, nx=nx, zy=zy, ny=ny, f=f, no=no, zr=alu-zero,
        ng=alu-neg, out=alu-out, out=outM);
}
